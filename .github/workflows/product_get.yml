name: Deploy Product Delete Service

on:
  push:
    paths:
      - 'Backend/productDomain/product_get_by_name_service/**'
    branches:
      - QA

jobs:
  build-and-deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 🛠️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Build and Push Docker Image
        working-directory: Backend/productDomain/product_get_by_name_service
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product_get_by_name_service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/product_get_by_name_service:latest

  deploy:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: 🚀 Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_PRODUCT_GET }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY_PRODUCT }}
          port: 22
          script: |
            echo "🔍 Verificando si Docker está instalado..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Instalando Docker..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose
              sudo systemctl start docker
            fi

            echo "🛑 Deteniendo contenedor anterior si existe..."
            docker stop product_get_by_name_service || true
            docker rm product_get_by_name_service || true

            echo "🧹 Eliminando imagen antigua..."
            docker image prune -af

            echo "📥 Descargando nueva imagen desde Docker Hub..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/product_get_by_name_service:latest

            echo "🚀 Ejecutando nuevo contenedor..."
            docker run -d --name product_get_by_name_service \
              -p ${{ secrets.SERVER_PORT_GET_PRODUCT }}:3018 \
              -e POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }} \
              -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/product_get_by_name_service:latest

             